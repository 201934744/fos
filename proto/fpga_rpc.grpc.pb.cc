// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/fpga_rpc.proto

#include "proto/fpga_rpc.pb.h"
#include "proto/fpga_rpc.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* FPGARPC_method_names[] = {
  "/FPGARPC/Run",
  "/FPGARPC/Alloc",
  "/FPGARPC/Free",
};

std::unique_ptr< FPGARPC::Stub> FPGARPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< FPGARPC::Stub> stub(new FPGARPC::Stub(channel));
  return stub;
}

FPGARPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Run_(FPGARPC_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Alloc_(FPGARPC_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Free_(FPGARPC_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FPGARPC::Stub::Run(::grpc::ClientContext* context, const ::RunMessage& request, ::RunReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Run_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::RunReturn>* FPGARPC::Stub::AsyncRunRaw(::grpc::ClientContext* context, const ::RunMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::RunReturn>(channel_.get(), cq, rpcmethod_Run_, context, request);
}

::grpc::Status FPGARPC::Stub::Alloc(::grpc::ClientContext* context, const ::AllocMessage& request, ::AllocReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Alloc_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::AllocReturn>* FPGARPC::Stub::AsyncAllocRaw(::grpc::ClientContext* context, const ::AllocMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::AllocReturn>(channel_.get(), cq, rpcmethod_Alloc_, context, request);
}

::grpc::Status FPGARPC::Stub::Free(::grpc::ClientContext* context, const ::FreeMessage& request, ::FreeReturn* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Free_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::FreeReturn>* FPGARPC::Stub::AsyncFreeRaw(::grpc::ClientContext* context, const ::FreeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::FreeReturn>(channel_.get(), cq, rpcmethod_Free_, context, request);
}

FPGARPC::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      FPGARPC_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FPGARPC::Service, ::RunMessage, ::RunReturn>(
          std::mem_fn(&FPGARPC::Service::Run), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FPGARPC_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FPGARPC::Service, ::AllocMessage, ::AllocReturn>(
          std::mem_fn(&FPGARPC::Service::Alloc), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      FPGARPC_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< FPGARPC::Service, ::FreeMessage, ::FreeReturn>(
          std::mem_fn(&FPGARPC::Service::Free), this)));
}

FPGARPC::Service::~Service() {
}

::grpc::Status FPGARPC::Service::Run(::grpc::ServerContext* context, const ::RunMessage* request, ::RunReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FPGARPC::Service::Alloc(::grpc::ServerContext* context, const ::AllocMessage* request, ::AllocReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FPGARPC::Service::Free(::grpc::ServerContext* context, const ::FreeMessage* request, ::FreeReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


